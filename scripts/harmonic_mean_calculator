import sympy
import math
from tqdm import tqdm
import numpy as np

# Define the theoretical weight/probability for k_n
def weight(k):
    if k == 1:
        return 6 / (math.pi ** 2)
    if sympy.isprime(k):
        return 1 / (k * (k + 1))

    factors = sympy.factorint(k)
    numerator = 1
    for p, r in factors.items():
        numerator *= 1 / (p ** r * (p + 1))
    return numerator

# Prompt the user for five bounds
print("Enter 5 increasing bounds to compute harmonic mean of k_n:")
bounds = sorted([int(input(f"Bound {i+1}: ")) for i in range(5)])
max_bound = bounds[-1]

# For harmonic mean, we compute sum of (weight(k) / k)
harmonic_sum = 0.0
harmonic_means = {}
current_index = 0

print("\nComputing harmonic sum with prime-structured weights...")
for k in tqdm(range(1, max_bound + 1)):
    w = weight(k)
    harmonic_sum += w / k
    if k == bounds[current_index]:
        # Harmonic mean is the reciprocal of the sum of (weights/k)
        hm = 1 / harmonic_sum if harmonic_sum != 0 else float('inf')
        harmonic_means[k] = hm
        current_index += 1
        if current_index >= len(bounds):
            break

print("\nResults:")
for b in bounds:
    print(f"hm[k_n] up to {b:>9} = {harmonic_means[b]:.10f}")
