import sympy
import math
from tqdm import tqdm
import numpy as np

# Define the true theoretical weight/probability for k_n
def weight(k):
    if k == 1:
        return 6 / (math.pi ** 2)
    if sympy.isprime(k):
        return (6 / (math.pi ** 2)) * (1 / (k * (k + 1)))

    factors = sympy.factorint(k)
    numerator = 1
    for p, r in factors.items():
        numerator *= 1 / (p ** r * (p + 1))
    return (6 / (math.pi ** 2)) * numerator

# Prompt the user for five bounds
print("Enter 5 increasing bounds to compute geometric expected value of k_n:")
bounds = sorted([int(input(f"Bound {i+1}: ")) for i in range(5)])
max_bound = bounds[-1]

# Precompute logs and weights
log_sum = 0.0
geometric_means = {}
current_index = 0

print("\nComputing log-sum with normalized weights (including 6/pi^2)...")
for k in tqdm(range(1, max_bound + 1)):
    w = weight(k)
    log_sum += math.log(k) * w
    if k == bounds[current_index]:
        gm = math.exp(log_sum)
        geometric_means[k] = gm
        current_index += 1
        if current_index >= len(bounds):
            break

print("\nResults:")
for b in bounds:
    print(f"gm[k_n] up to {b:>9} = {geometric_means[b]:.10f}")
