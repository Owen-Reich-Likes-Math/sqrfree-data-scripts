# monte_carlo_abc.py

import sympy
import math
import random
from tqdm import tqdm


def rad(n):
    """Compute the radical of n: product of distinct prime factors."""
    return math.prod(sympy.primefactors(n)) if n > 1 else 1


def monte_carlo_abc(X, Y, epsilon, trials):
    """
    Monte Carlo simulation for the inequality:
    log(a*b) - log(k_abc) > -epsilon * log(a + b),
    where k_abc = a*b*c / rad(abc) and c = a + b.
    Returns the fraction of trials where the inequality holds.
    """
    holds = 0
    for _ in tqdm(range(trials), desc="Sampling"):
        # Sample until coprime and X < a*b < Y
        while True:
            a = random.randint(1, int(math.sqrt(Y)) + 1)
            b = random.randint(1, int(math.sqrt(Y)) + 1)
            prod = a * b
            if X < prod < Y and math.gcd(a, b) == 1:
                break

        c = a + b
        abc = a * b * c
        k_abc = abc / rad(abc)

        lhs = math.log(a * b) - math.log(k_abc)
        rhs = -epsilon * math.log(a + b)

        if lhs > rhs:
            holds += 1

    return holds / trials


def main():
    print("Monte Carlo ABC Inequality Tester")
    X = float(input("Enter lower bound X for ab: "))
    Y = float(input("Enter upper bound Y for ab: "))
    epsilon = float(input("Enter epsilon value: "))
    trials = int(input("Enter number of Monte Carlo trials: "))

    result = monte_carlo_abc(X, Y, epsilon, trials)
    print(f"\nInequality holds in {result * 100:.5f}% of {trials} trials.")


if __name__ == "__main__":
    main()

